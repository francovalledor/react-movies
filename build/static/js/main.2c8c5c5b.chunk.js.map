{"version":3,"sources":["api/key.js","utils/utils.js","api/api.js","components/Character.js","components/Movie.js","pages/MovieDetails.js","components/MovieCard.js","components/PersonDetails.js","pages/Person.js","components/Movies.js","pages/Popular.js","pages/TopRated.js","pages/Upcoming.js","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEY","fetchJSON","URL","a","fetch","datos","json","API_BASE_URL","Movie","movie","this","scraped","id","title","overview","vote","vote_average","date","release_date","original_language","original_title","popularity","poster","Picture","getURL","poster_path","backdrop","backdrop_path","endPoint","details","runtime","genres","map","name","cast","credits","character","Character","crew","Crew","images","backdrops","image","posters","newMovie","Movies","query","page","resultados","results","upcomingMovies","topRatedMovies","popularMovies","Search","movies","persons","person","Person","profile","profile_path","personID","job","department","ID","birthday","deathday","place_of_birth","biography","gender","profiles","file_path","movie_credits","imageName","API","props","className","style","minWidth","to","data-href","src","alt","moviedata","renderCharacters","renderGenres","join","renderDirector","director","filter","MovieDetails","useState","setMovie","useParams","useEffect","get","getMovie","MovieCard","maxWidth","slice","PersonDetails","forEach","push","renderMovies","setPerson","getDetails","persondata","getCharacter","Popular","setMovies","getPopular","getMovies","TopRated","getTopRated","Upcoming","getUpcoming","Navbar","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","exact","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAAaA,EAAU,mCCAVC,EAAS,uCAAG,WAAMC,GAAN,eAAAC,EAAA,sEACHC,MAAMF,GADH,cACjBG,EADiB,gBAEPA,EAAMC,OAFC,cAErBD,EAFqB,yBAGdA,GAHc,2CAAH,sDCGhBE,EAAe,+BAGRC,EAAb,WACI,WAAYC,GAAQ,oBAChBC,KAAKC,SAAU,EACfD,KAAKE,GAAKH,EAAMG,GAChBF,KAAKG,MAAQJ,EAAMI,MACnBH,KAAKI,SAAWL,EAAMK,SACtBJ,KAAKK,KAAON,EAAMO,aAClBN,KAAKO,KAAOR,EAAMS,aAClBR,KAAKS,kBAAoBV,EAAMU,kBAC/BT,KAAKU,eAAiBX,EAAMW,eAC5BV,KAAKW,WAAaZ,EAAMY,WACxBX,KAAKY,OAASC,EAAQC,OAAOf,EAAMgB,aACnCf,KAAKgB,SAAWH,EAAQC,OAAOf,EAAMkB,eAZ7C,uDAgBQ,OAAOjB,KAAKG,QAhBpB,wJA+CaH,KAAKC,QA/ClB,wBAiDkBiB,EAjDlB,iBAiDuClB,KAAKE,GAjD5C,oBAiD0DZ,EAjD1D,6DAmDgCC,EAAUM,EAAeqB,GAnDzD,OAmDgBC,EAnDhB,OAqDYnB,KAAKoB,QAAUD,EAAQC,QACvBpB,KAAKqB,OAASF,EAAQE,OAAOC,KAAI,qBAAEC,QACnCvB,KAAKwB,KAAOL,EAAQM,QAAQD,KAAKF,KAAI,SAAAI,GAAS,OAAI,IAAIC,EAAUD,MAChE1B,KAAK4B,KAAOT,EAAQM,QAAQG,KAAKN,KAAI,SAAAM,GAAI,OAAI,IAAIC,EAAKD,MAEtD5B,KAAK8B,OAAQ,CACTC,UAAYZ,EAAQW,OAAOC,UAAUT,KAAI,SAAAU,GAAK,OAAInB,EAAQC,OAAOkB,MAEjEC,QAAUd,EAAQW,OAAOG,QAAQX,KAAI,SAAAU,GAAK,OAAInB,EAAQC,OAAOkB,OAGjEhC,KAAKC,SAAU,EAhE3B,iCAmEeD,MAnEf,gQA4EckB,EA5Ed,iBA4EmClB,KAAKE,GA5ExC,4BA4E8DZ,GA5E9D,SA8EyBC,EAAUM,EAAeqB,GA9ElD,cAgFQM,GAFIA,EA9EZ,QAgFoBA,KAhFpB,kBAkFeA,GAlFf,iQA0FcN,EA1Fd,iBA0FmClB,KAAKE,GA1FxC,4BA0F8DZ,GA1F9D,SA4FyBC,EAAUM,EAAeqB,GA5FlD,cA8FQM,GAFIA,EA5FZ,QA8FoBA,KA9FpB,kBAgGeA,GAhGf,2KAmBqBtB,GAnBrB,kFAuBkBgB,EAvBlB,iBAuBuChB,EAvBvC,oBAuBqDZ,EAvBrD,6DAyB8BC,EAAUM,EAAeqB,GAzBvD,cAyBgBnB,EAzBhB,QA0BgBmC,EAAW,IAAIpC,EAAMC,IAChBqB,QAAUrB,EAAMqB,QACzBc,EAASb,OAAStB,EAAMsB,OAAOC,KAAI,qBAAEC,QACrCW,EAASV,KAAOzB,EAAM0B,QAAQD,KAAKF,KAAI,SAAAI,GAAS,OAAI,IAAIC,EAAUD,MAClEQ,EAASN,KAAO7B,EAAM0B,QAAQG,KAAKN,KAAI,SAAAM,GAAI,OAAI,IAAIC,EAAKD,MAExDM,EAASJ,OAAQ,CACbC,UAAYhC,EAAM+B,OAAOC,UAAUT,KAAI,SAAAU,GAAK,OAAInB,EAAQC,OAAOkB,MAC/DC,QAAUlC,EAAM+B,OAAOG,QAAQX,KAAI,SAAAU,GAAK,OAAInB,EAAQC,OAAOkB,OAG/DE,EAASjC,SAAU,EArC/B,kBAuCmBiC,GAvCnB,0GAoGMC,E,6IAEkBC,G,8FAAOC,E,+BAAK,EACtBnB,E,gCAAoC5B,E,8BAA6B8C,E,iBAAcC,E,iCAE9D9C,EAAUM,EAAeqB,G,cAChDoB,GADIA,E,QACoBC,QAAQjB,KAAI,SAAAvB,GAAK,OAAI,IAAID,EAAMC,M,kBAChDuC,G,6QAGcD,E,+BAAK,EACpBnB,E,kCAAsC5B,E,6BAA4B+C,G,SAE7C9C,EAAUM,EAAeqB,G,cACpDsB,GADIA,E,QAC4BD,QAAQjB,KAAI,SAAAvB,GAAK,OAAI,IAAID,EAAMC,M,kBACxDyC,G,4QAGcH,E,+BAAK,EACpBnB,E,mCAAuC5B,E,6BAA4B+C,G,SAE9C9C,EAAUM,EAAeqB,G,cACpDuB,GADIA,E,QAC4BF,QAAQjB,KAAI,SAAAvB,GAAK,OAAI,IAAID,EAAMC,M,kBACxD0C,G,2QAGaJ,E,+BAAK,EACnBnB,E,iCAAqC5B,E,6BAA4B+C,G,SAE7C9C,EAAUM,EAAeqB,G,cACnDwB,GADIA,E,QAC0BH,QAAQjB,KAAI,SAAAvB,GAAK,OAAI,IAAID,EAAMC,M,kBACtD2C,G,wGAITC,E,6IACkBP,G,gGAAOC,E,+BAAK,EACxBnB,E,gCAAoC5B,E,8BAA6B8C,E,iBAAcC,E,iCAChE9C,EAAUM,EAAeqB,G,cAC5C0B,GADIA,E,QACYL,QAAQjB,KAAI,SAAAvB,GAAK,OAAI,IAAID,EAAMC,MAE/CmB,EAAQ,iCAA6B5B,EAA7B,8BAA0D8C,EAA1D,iBAAwEC,EAAxE,wB,SACY9C,EAAUM,EAAeqB,G,cAC7C2B,GADIA,E,QACcN,QAAQjB,KAAI,SAAAwB,GAAM,OAAI,IAAIC,EAAOD,M,kBAC5C,CAACF,SAAQC,Y,0GAIlBlB,EACF,WAAYD,GAAY,oBACpB1B,KAAKuB,KAAOG,EAAUH,KACtBvB,KAAK0B,UAAYA,EAAUA,UAC3B1B,KAAKgD,QAAUnC,EAAQC,OAAOY,EAAUuB,cACxCjD,KAAKkD,SAAWxB,EAAUxB,IAI5B2B,EACF,WAAYD,GAAO,oBACf5B,KAAKuB,KAAOK,EAAKL,KACjBvB,KAAKmD,IAAMvB,EAAKuB,IAChBnD,KAAKgD,QAAUnC,EAAQC,OAAOc,EAAKqB,cACnCjD,KAAKkD,SAAWtB,EAAK1B,GACrBF,KAAKoD,WAAaxB,EAAKwB,YAIlBL,EAAb,WAMI,WAAYM,GAAK,oBACbrD,KAAKE,GAAKmD,EACVrD,KAAKC,SAAU,EARvB,8KAcaD,KAAKC,QAdlB,wBAekBiB,EAflB,kBAewClB,KAAKE,GAf7C,oBAe2DZ,EAf3D,mEAiB+BC,EAAUM,EAAeqB,GAjBxD,OAiBgB4B,EAjBhB,OAmBY9C,KAAKuB,KAAOuB,EAAOvB,KACnBvB,KAAKsD,SAAWR,EAAOQ,SACvBtD,KAAKuD,SAAWT,EAAOS,SACvBvD,KAAKgD,QAAUnC,EAAQC,OAAOgC,EAAOG,cACrCjD,KAAKwD,eAAiBV,EAAOU,eAC7BxD,KAAKW,WAAamC,EAAOnC,WACzBX,KAAKyD,UAAYX,EAAOW,UAEF,IAAlBX,EAAOY,SACP1D,KAAK0D,OAAS,KAGI,IAAlBZ,EAAOY,SACP1D,KAAK0D,OAAS,KAGlB1D,KAAK8B,OAAS,CACV6B,SAAWb,EAAOhB,OAAO6B,SAASrC,KAAI,SAAAU,GAAK,OAAInB,EAAQC,OAAOkB,EAAM4B,eAGxE5D,KAAK4C,OAAS,CACVpB,KAAOsB,EAAOe,cAAcrC,KAAKF,KAAI,SAAAvB,GAAK,OAAI,IAAID,EAAMC,MACxD6B,KAAOkB,EAAOe,cAAcjC,KAAKN,KAAI,SAAAvB,GAAK,OAAI,IAAID,EAAMC,OAG5DC,KAAKC,SAAU,EA5C3B,iCA+CeD,MA/Cf,kQAwDckB,EAxDd,kBAwDoClB,KAAKE,GAxDzC,kCAwDqEZ,EAxDrE,yBA0D2BC,EAAUM,EAAeqB,GA1DpD,cA0DY4B,EA1DZ,yBA4DeA,GA5Df,6GAgEajC,EAAb,oGACmBiD,GAOX,OALIA,EACQ,6CAA0CA,GAEvC,gDANvB,KAceC,EAFL,CAAE5B,SAAQrC,QAAOiD,SAAQpB,YAAWd,UAAS8B,UCvPhD,SAAShB,EAAUqC,GACtB,IAAItC,EAAYsC,EAAMtC,UAEtB,OACI,sBAAKuC,UAAU,+DAA+DC,MAAO,CAACC,SAAU,SAAhG,UACI,qBAAKF,UAAU,4BAAf,SACI,gCACI,oBAAIA,UAAU,mCAAd,SAAkDvC,EAAUH,OAC5D,mBAAG0C,UAAU,YAAb,SAA0BvC,EAAUA,UAAa,MAAQA,EAAUA,UAAa,UAGxF,cAAC,IAAD,CAAM0C,GAAI,WAAa1C,EAAUwB,SAAjC,SACI,qBAAKe,UAAU,eAAf,SACI,qBAAKI,YAAU,oDACXJ,UAAU,yBACVK,IAAK5C,EAAUsB,QACfuB,IAAI,oCChBrB,SAASzE,EAAMkE,GAClB,IAAMQ,EAAYR,EAAMjE,MACxB,SAAS0E,IAEL,GAAIT,EAAMjE,MAAMyB,KACZ,OAAOwC,EAAMjE,MAAMyB,KAAKF,KACpB,SAAAI,GAAS,OAAI,cAAC,EAAD,CAAWA,UAAWA,GAAgBA,EAAUwB,aAKzE,IAmB8BnD,EAnBxB2E,EAAe,WACjB,IAAIrD,EAAS,GAKb,OAJI2C,EAAMjE,MAAMsB,SACZA,EAAQ2C,EAAMjE,MAAMsB,OAAOsD,KAAK,OAG7BtD,GAGX,SAASuD,IACL,IAAIC,EAAW,GAMf,OAJIb,EAAMjE,MAAM6B,OACZiD,EAAWb,EAAMjE,MAAM6B,KAAKkD,QAAO,SAAAlD,GAAI,MAAe,aAAXA,EAAKuB,OAAkB,GAAG5B,MAGjEsD,EAAW,aAAeA,EAAU,GAqChD,OAlC8B9E,EAkCFyE,EAhCpB,sBAAKP,UAAU,YAAf,UACI,qBAAKA,UAAU,iDAAf,SACI,qBAAKA,UAAU,+BAAf,SACI,sBAAKA,UAAU,iBAAf,UACI,qBAAKA,UAAU,WAAf,SACI,qBAAKK,IAAKvE,EAAMa,OAAQqD,UAAU,WAAWM,IAAKxE,EAAMI,MAAQ,cAEpE,qBAAK8D,UAAU,WAAf,SACI,sBAAKA,UAAU,YAAf,UACI,oBAAIA,UAAU,aAAd,SAA4BlE,EAAMI,QAClC,mBAAG8D,UAAU,YAAb,SAA0BlE,EAAMK,WAChC,oBAAG6D,UAAU,YAAb,qBAAkCS,IAAlC,OACA,mBAAGT,UAAU,YAAb,SAA0BW,kBAM9C,sBAAKX,UAAU,YAAf,UACI,oBAAIA,UAAU,cAAd,kBACA,qBAAKA,UAAU,qBAAf,SACI,qBAAKA,UAAU,gDAAf,SACKQ,cCnDtB,SAASM,EAAaf,GAAQ,IAAD,EACRgB,mBAAS,IADD,mBAC3BjF,EAD2B,KACpBkF,EADoB,KAG5B/E,EAAOgF,cAAPhF,GAWN,OATAiF,qBACE,WAAM,4CACJ,4BAAA1F,EAAA,sEACwBsE,EAAIjE,MAAMsF,IAAIlF,GADtC,OACMsE,EADN,OAEES,EAAST,GAFX,4CADI,uBAAC,WAAD,wBAKJa,KACI,CAACnF,IAGP,cAAC,EAAD,CAAOH,MAAOA,IClBX,SAASuF,EAAUtB,GACtB,IAEuBjE,EAFjByE,EAAYR,EAAMjE,MAkBxB,OAhBuBA,EAgBFyE,EAdjB,sBAAKP,UAAU,sBAAsBC,MAAO,CAACC,SAAU,QAASoB,SAAU,SAA1E,UACI,cAAC,IAAD,CAAMnB,GAAI,WAAarE,EAAMG,GAA7B,SACI,qBAAK+D,UAAU,eAAeK,IAAKvE,EAAMa,OAAQ2D,IAAI,mBAEzD,sBAAKN,UAAU,YAAf,UACE,oBAAIA,UAAU,aAAd,SAA4BlE,EAAMI,QAClC,oBAAG8D,UAAU,YAAb,UAA0BlE,EAAMK,SAASoF,MAAM,EAAE,KAAjD,eCXP,SAASC,EAAczB,GAC1B,IAAIlB,EAASkB,EAAMlB,OAkBnB,OACI,sBAAKmB,UAAU,iDAAf,UACI,qBAAKA,UAAU,wBAAf,SACI,sBAAKA,UAAU,iBAAf,UACI,qBAAKA,UAAU,WAAf,SACI,qBAAKK,IAAKxB,EAAOE,QAASiB,UAAU,WAAWM,IAAKzB,EAAOvB,KAAO,mBAEtE,qBAAK0C,UAAU,WAAf,SACA,sBAAKA,UAAU,YAAf,UACI,oBAAIA,UAAU,aAAd,SAA4BnB,EAAOvB,OACnC,mBAAG0C,UAAU,YAAb,SAA0BnB,EAAOW,YACjC,oBAAGQ,UAAU,YAAb,oBAAiCnB,EAAOQ,SAAxC,IAAmDR,EAAOU,4BAK1E,sBAAKS,UAAU,YAAf,UACI,qBAAIA,UAAU,cAAd,UAA6BnB,EAAOvB,KAApC,eACA,qBAAK0C,UAAU,qBAAf,SACI,qBAAKA,UAAU,gDAAf,SApCZ,WACQ,IAAIrB,EAAS,GAab,OAZIoB,EAAMlB,SAAW,IACbkB,EAAMlB,OAAOF,SAEVoB,EAAMlB,OAAOF,OAAOpB,MACnBsB,EAAOF,OAAOpB,KAAKkE,SAAQ,SAAA3F,GAAK,OAAI6C,EAAO+C,KAAK5F,MAGhDiE,EAAMlB,OAAOF,OAAOhB,MACpBkB,EAAOF,OAAOhB,KAAK8D,SAAQ,SAAA3F,GAAK,OAAI6C,EAAO+C,KAAK5F,OAIrD6C,EAAOtB,KAAI,SAAAvB,GAAK,OAAI,cAACuF,EAAD,CAAWvF,MAAOA,OAuBpC6F,aCpCd,SAAS7C,EAAOiB,GAAQ,IAAD,EACAgB,mBAAS,IADT,mBACrBlC,EADqB,KACb+C,EADa,KAEtB3F,EAAOgF,cAAPhF,GAYN,OATAiF,qBAAU,WAAM,4CAEd,4BAAA1F,EAAA,sEACyB,IAAIsE,EAAIhB,OAAO7C,GAAI4F,aAD5C,OACMC,EADN,OAEEF,EAAUE,GAFZ,4CAFc,uBAAC,WAAD,wBAMdC,KACC,CAAC9F,IAGJ,qBAAK+D,UAAU,gBAAf,SACE,cAACwB,EAAD,CAAe3C,OAAQA,MCnBpB,SAASX,EAAO6B,GAKnB,OACI,qBAAKC,UAAU,qBAAf,SACA,qBAAKA,UAAU,gDAAf,SALOD,EAAMpB,OAAOtB,KAAI,SAAAvB,GAAK,OAAI,cAACuF,EAAD,CAAWvF,MAAOA,GAAYA,EAAMG,WCAtE,SAAS+F,IAAW,IAAD,EACIjB,mBAAS,IADb,mBACjBpC,EADiB,KACTsD,EADS,iDAGxB,4BAAAzG,EAAA,sEAC8BsE,EAAI5B,OAAOgE,aADzC,OACQzD,EADR,OAEIwD,EAAUxD,GAFd,4CAHwB,sBAUtB,OAFFyC,qBAAU,YARc,mCAQPiB,KAAc,IAGzB,cAAC,EAAD,CAAQxD,OAAQA,ICXjB,SAASyD,IAAY,IAAD,EACGrB,mBAAS,IADZ,mBAClBpC,EADkB,KACVsD,EADU,iDAGzB,4BAAAzG,EAAA,sEAC+BsE,EAAI5B,OAAOmE,cAD1C,OACQ7D,EADR,OAEIyD,EAAUzD,GAFd,4CAHyB,sBAUvB,OAFF0C,qBAAU,YARe,mCAQRiB,KAAc,IAGzB,cAAC,EAAD,CAAQxD,OAAQA,ICXjB,SAAS2D,IAAY,IAAD,EACGvB,mBAAS,IADZ,mBAClBpC,EADkB,KACVsD,EADU,iDAGzB,4BAAAzG,EAAA,sEAC+BsE,EAAI5B,OAAOqE,cAD1C,OACQhE,EADR,OAEI0D,EAAU1D,GAFd,4CAHyB,sBAUvB,OAFF2C,qBAAU,YARe,mCAQRiB,KAAc,IAGzB,cAAC,EAAD,CAAQxD,OAAQA,ICDjB,SAAS6D,IACZ,OACI,cAAC,IAAD,UACI,gCACI,sBAAKxC,UAAU,gDAAf,UACI,cAAC,IAAD,CAAMA,UAAU,eAAeG,GAAG,IAAlC,kBACA,wBAAQH,UAAU,iBAAiByC,KAAK,SAASC,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,oBAA5J,SACI,sBAAM9C,UAAU,0BAEpB,qBAAKA,UAAU,2BAA2B/D,GAAG,YAA7C,SACI,qBAAI+D,UAAU,aAAd,UACI,oBAAIA,UAAU,WAAd,SACI,cAAC,IAAD,CAAMA,UAAU,WAAWG,GAAG,YAA9B,yBAEJ,oBAAIH,UAAU,WAAd,SACI,cAAC,IAAD,CAAMA,UAAU,WAAWG,GAAG,YAA9B,wBAEJ,oBAAIH,UAAU,WAAd,SACI,cAAC,IAAD,CAAMA,UAAU,WAAWG,GAAG,WAA9B,+BAMhB,uBASA,eAAC,IAAD,WACI,cAAC,IAAD,CAAO4C,OAAK,EAACC,KAAK,IAAlB,SACI,cAACZ,EAAD,MAEJ,cAAC,IAAD,CAAOY,KAAK,cAAZ,SACI,cAAClC,EAAD,MAEJ,cAAC,IAAD,CAAOkC,KAAK,cAAZ,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,WAAZ,SACI,cAAChB,EAAD,MAEJ,cAAC,IAAD,CAAOgB,KAAK,YAAZ,SACI,cAACV,EAAD,MAEJ,cAAC,IAAD,CAAOU,KAAK,YAAZ,SACI,cAACZ,EAAD,cCpDTa,MAVf,WACE,OACE,sBAAKjD,UAAU,MAAf,UACE,qBAAKA,UAAU,cACf,cAACwC,EAAD,QCMSU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2c8c5c5b.chunk.js","sourcesContent":["export const API_KEY = '373cac5357693350f2c0281f8c7e6ca9'","export const fetchJSON = async URL => {\r\n    let datos = await fetch(URL)\r\n    datos = await datos.json()\r\n    return datos\r\n}","import { API_KEY } from './key'\r\nimport { fetchJSON } from '../utils/utils'\r\n\r\nconst API_BASE_URL = 'https://api.themoviedb.org/3'\r\n\r\n\r\nexport class Movie {\r\n    constructor(movie) {\r\n        this.scraped = false\r\n        this.id = movie.id\r\n        this.title = movie.title\r\n        this.overview = movie.overview\r\n        this.vote = movie.vote_average\r\n        this.date = movie.release_date\r\n        this.original_language = movie.original_language\r\n        this.original_title = movie.original_title\r\n        this.popularity = movie.popularity\r\n        this.poster = Picture.getURL(movie.poster_path)\r\n        this.backdrop = Picture.getURL(movie.backdrop_path)\r\n    }\r\n\r\n    toString(){\r\n        return this.title\r\n    }\r\n\r\n    static async get(id) {\r\n        /**\r\n         * Get a movie with details\r\n         */\r\n            const endPoint = `/movie/${id}?api_key=${API_KEY}&language=en&append_to_response=credits%2Cimages`\r\n\r\n            let movie = await fetchJSON(API_BASE_URL + endPoint)\r\n            let newMovie = new Movie(movie)\r\n            newMovie.runtime = movie.runtime\r\n            newMovie.genres = movie.genres.map(({name}) => name)\r\n            newMovie.cast = movie.credits.cast.map(character => new Character(character))\r\n            newMovie.crew = movie.credits.crew.map(crew => new Crew(crew))\r\n\r\n            newMovie.images= {\r\n                backdrops : movie.images.backdrops.map(image => Picture.getURL(image)),\r\n                posters : movie.images.posters.map(image => Picture.getURL(image))\r\n            }\r\n            \r\n            newMovie.scraped = true\r\n\r\n            return newMovie\r\n    }\r\n\r\n    async getDetails() {\r\n        /**\r\n         * Get all movie details\r\n         */\r\n\r\n        if (!this.scraped)\r\n        {\r\n            const endPoint = `/movie/${this.id}?api_key=${API_KEY}&language=en&append_to_response=credits%2Cimages`\r\n            \r\n            let details = await fetchJSON(API_BASE_URL + endPoint)\r\n            \r\n            this.runtime = details.runtime\r\n            this.genres = details.genres.map(({name}) => name)\r\n            this.cast = details.credits.cast.map(character => new Character(character))\r\n            this.crew = details.credits.crew.map(crew => new Crew(crew))\r\n\r\n            this.images= {\r\n                backdrops : details.images.backdrops.map(image => Picture.getURL(image)),\r\n\r\n                posters : details.images.posters.map(image => Picture.getURL(image))\r\n            }\r\n            \r\n            this.scraped = true\r\n        }\r\n\r\n        return this\r\n    }\r\n    \r\n    async getCast() {\r\n        /**\r\n         * get movie cast\r\n         * DEPRECATED: now included in getDetails() \r\n         */\r\n\r\n        const endPoint = `/movie/${this.id}/credits?api_key=${API_KEY}`\r\n        \r\n        let cast = await fetchJSON(API_BASE_URL + endPoint)\r\n        \r\n        cast = cast.cast\r\n        \r\n        return cast\r\n    }\r\n    \r\n    async getImages() {\r\n        /**\r\n         * get movie images\r\n         * DEPRECATED: now included in getDetails()\r\n         */\r\n        const endPoint = `/movie/${this.id}/credits?api_key=${API_KEY}`\r\n        \r\n        let cast = await fetchJSON(API_BASE_URL + endPoint)\r\n        \r\n        cast = cast.cast\r\n        \r\n        return cast\r\n    }\r\n}\r\n\r\nclass Movies {\r\n      \r\n    static async search(query, page=1){\r\n        const endPoint = `/search/movie?api_key=${API_KEY}&language=en&query=${query}&page=${page}&include_adult=false`\r\n    \r\n        let resultados = await fetchJSON(API_BASE_URL + endPoint)\r\n        resultados = resultados.results.map(movie => new Movie(movie))\r\n        return resultados\r\n    }\r\n\r\n    static async getUpcoming(page=1) {\r\n        const endPoint = `/movie/upcoming?api_key=${API_KEY}&language=en&page=${page}`\r\n    \r\n        let upcomingMovies = await fetchJSON(API_BASE_URL + endPoint)\r\n        upcomingMovies = upcomingMovies.results.map(movie => new Movie(movie))\r\n        return upcomingMovies\r\n    }\r\n    \r\n    static async getTopRated(page=1) {\r\n        const endPoint = `/movie/top_rated?api_key=${API_KEY}&language=en&page=${page}`\r\n    \r\n        let topRatedMovies = await fetchJSON(API_BASE_URL + endPoint)\r\n        topRatedMovies = topRatedMovies.results.map(movie => new Movie(movie))\r\n        return topRatedMovies\r\n    }\r\n\r\n    static async getPopular(page=1) {\r\n        const endPoint = `/movie/popular?api_key=${API_KEY}&language=en&page=${page}`\r\n    \r\n        let popularMovies = await fetchJSON(API_BASE_URL + endPoint)\r\n        popularMovies = popularMovies.results.map(movie => new Movie(movie))\r\n        return popularMovies\r\n    }\r\n}\r\n\r\nclass Search {\r\n    static async search(query, page=1){\r\n        let endPoint = `/search/movie?api_key=${API_KEY}&language=en&query=${query}&page=${page}&include_adult=false`\r\n        let movies = await fetchJSON(API_BASE_URL + endPoint)\r\n        movies = movies.results.map(movie => new Movie(movie))\r\n\r\n        endPoint = `/search/person?api_key=${API_KEY}&language=en&query=${query}&page=${page}&include_adult=false`\r\n        let persons = await fetchJSON(API_BASE_URL + endPoint)\r\n        persons = persons.results.map(person => new Person(person))\r\n        return {movies, persons}\r\n    }\r\n}\r\n\r\nclass Character {\r\n    constructor(character) {\r\n        this.name = character.name\r\n        this.character = character.character\r\n        this.profile = Picture.getURL(character.profile_path)\r\n        this.personID = character.id\r\n    }\r\n}\r\n\r\nclass Crew{\r\n    constructor(crew) {\r\n        this.name = crew.name\r\n        this.job = crew.job\r\n        this.profile = Picture.getURL(crew.profile_path)\r\n        this.personID = crew.id\r\n        this.department = crew.department\r\n    }\r\n}\r\n\r\nexport class Person {\r\n    /**\r\n     * Person, cast or crew\r\n     * to obtain all data must call getDetails()\r\n     */\r\n\r\n    constructor(ID) {\r\n        this.id = ID\r\n        this.scraped = false\r\n    }\r\n    async getDetails() {\r\n        /**\r\n         * Get all person details (character or crew)\r\n         */\r\n        if (!this.scraped) {\r\n            const endPoint = `/person/${this.id}?api_key=${API_KEY}&language=en&append_to_response=images%2Cmovie_credits`\r\n        \r\n            let person = await fetchJSON(API_BASE_URL + endPoint)\r\n            \r\n            this.name = person.name\r\n            this.birthday = person.birthday\r\n            this.deathday = person.deathday\r\n            this.profile = Picture.getURL(person.profile_path)\r\n            this.place_of_birth = person.place_of_birth\r\n            this.popularity = person.popularity\r\n            this.biography = person.biography\r\n    \r\n            if (person.gender === 1) {\r\n                this.gender = 'F'\r\n            }\r\n    \r\n            if (person.gender === 2) {\r\n                this.gender = 'M'\r\n            }\r\n\r\n            this.images = {\r\n                profiles : person.images.profiles.map(image => Picture.getURL(image.file_path))\r\n            }\r\n            \r\n            this.movies = {\r\n                cast : person.movie_credits.cast.map(movie => new Movie(movie)),\r\n                crew : person.movie_credits.crew.map(movie => new Movie(movie)),    \r\n            }\r\n\r\n            this.scraped = true\r\n        }\r\n\r\n        return this\r\n    }\r\n    \r\n    async getMovies() {\r\n        /**\r\n         * get person movies\r\n         * DEPRECATED: included in getDetails()\r\n         */\r\n\r\n        const endPoint = `/person/${this.id}/movie_credits?api_key=${API_KEY}&language=en`\r\n    \r\n        let person = await fetchJSON(API_BASE_URL + endPoint)\r\n    \r\n        return person\r\n    }\r\n}\r\n\r\nexport class Picture {\r\n    static getURL (imageName) {\r\n        let imageURL\r\n        if (imageName){\r\n            imageURL =  `https://image.tmdb.org/t/p/original${imageName}`\r\n        } else {\r\n            imageURL = 'http://lorempixel.com/g/626/939/abstract/'\r\n        }\r\n        return imageURL\r\n    } \r\n}\r\n\r\nlet API = { Movies, Movie, Person, Character, Picture, Search }\r\n\r\nexport default API","import { Link } from \"react-router-dom\"\r\n\r\nexport function Character(props) {\r\n    let character = props.character\r\n\r\n    return (\r\n        <div className=\"card promoting-card m-2 shadow-sm character-card text-center\" style={{minWidth: \"15rem\"}}>\r\n            <div className=\"card-body d-flex flex-row\">\r\n                <div >\r\n                    <h4 className=\"card-title font-weight-bold mb-2\">{character.name}</h4>\r\n                    <p className=\"card-text\">{character.character ? ('is ' + character.character) : ''}</p>\r\n                </div>\r\n            </div>\r\n            <Link to={\"/person/\" + character.personID}>\r\n                <div className=\"view overlay\">\r\n                    <img data-href=\"{router.urlFor(Person, {id: character.personID})}\"\r\n                        className=\"card-img-top rounded-0\"\r\n                        src={character.profile}\r\n                        alt=\"is {character.character}\"\r\n                        />\r\n                </div>\r\n            </Link>\r\n        </div>\r\n      )\r\n    }","import { Character } from \"./Character\"\r\n\r\nexport function Movie(props) {\r\n    const moviedata = props.movie\r\n    function renderCharacters(){\r\n\r\n        if (props.movie.cast) {\r\n            return props.movie.cast.map(\r\n                character => <Character character={character} key={character.personID}/>\r\n            )\r\n        }\r\n    }\r\n\r\n    const renderGenres = () => {\r\n        let genres = ''\r\n        if (props.movie.genres) {\r\n            genres =props.movie.genres.join('  ')\r\n        }\r\n\r\n        return genres\r\n    }\r\n\r\n    function renderDirector() {\r\n        let director = ''\r\n\r\n        if (props.movie.crew) {\r\n            director = props.movie.crew.filter(crew => crew.job==='Director')[0].name\r\n        }\r\n\r\n        return (director ? \"Director: \" + director: \"\")\r\n    }\r\n\r\n    function MovieDetailsTemplate(movie) {\r\n        const template = (\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center text-center m-2 p-2\">\r\n                    <div className=\"card mb-3 movie-details-card\">\r\n                        <div className=\"row no-gutters\">\r\n                            <div className=\"col-md-4\">\r\n                                <img src={movie.poster} className=\"card-img\" alt={movie.title + ' poster'}/>\r\n                            </div>\r\n                            <div className=\"col-md-8\">\r\n                                <div className=\"card-body\">\r\n                                    <h3 className=\"card-title\">{movie.title}</h3>\r\n                                    <p className=\"card-text\">{movie.overview}</p>\r\n                                    <p className=\"card-text\">Genres: {renderGenres()} </p>\r\n                                    <p className=\"card-text\">{renderDirector()}</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <h4 className=\"text-center\">Cast</h4>\r\n                    <div className=\"row cards-deck m-2\">\r\n                        <div className=\"justify-content-center text-center card-group\">\r\n                            {renderCharacters()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n        return template\r\n    }\r\n\r\n    return MovieDetailsTemplate(moviedata)\r\n}","import { useEffect, useState } from \"react\"\r\nimport API from \"../api/api\"\r\nimport { useParams } from 'react-router-dom';\r\nimport { Movie } from \"../components/Movie\";\r\n\r\nexport function MovieDetails(props) {\r\n  const [movie, setMovie] = useState([])\r\n  \r\n  let { id } = useParams()\r\n  \r\n  useEffect(\r\n    () => { \r\n      async function getMovie() {\r\n        let moviedata = await API.Movie.get(id)\r\n        setMovie(moviedata)\r\n      }\r\n      getMovie()\r\n       }, [id])\r\n\r\n  return (\r\n    <Movie movie={movie}/>\r\n  )\r\n}","import { Link } from \"react-router-dom\"\r\n\r\nexport function MovieCard(props) {\r\n    const moviedata = props.movie\r\n\r\n    function MovieTemplate(movie){\r\n        const template = (\r\n        <div className=\"card m-2 movie-card\" style={{minWidth: \"15rem\", maxWidth: \"50rem\"}}>\r\n            <Link to={'/movies/' + movie.id}>\r\n                <img className=\"card-img-top\" src={movie.poster} alt=\"movie poster\" />\r\n            </Link>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{movie.title}</h5>\r\n              <p className=\"card-text\">{movie.overview.slice(0,100)}...</p>\r\n            </div>\r\n        </div>\r\n        )\r\n\r\n    return template\r\n    }\r\n\r\n    return MovieTemplate(moviedata)\r\n}","import { MovieCard } from \"./MovieCard\";\r\n\r\nexport function PersonDetails(props) {\r\n    let person = props.person\r\n    function renderMovies() {\r\n            let movies = []\r\n            if (props.person !== {}) {\r\n                if (props.person.movies){\r\n                    \r\n                    if(props.person.movies.cast){\r\n                        person.movies.cast.forEach(movie => movies.push(movie));\r\n                    }\r\n                    \r\n                    if (props.person.movies.crew){\r\n                        person.movies.crew.forEach(movie => movies.push(movie));\r\n                    }\r\n                }\r\n            }\r\n            return movies.map(movie => <MovieCard movie={movie}/>)\r\n        }\r\n\r\n    return (\r\n        <div className=\"row justify-content-center text-center m-2 p-2\">\r\n            <div className=\"card person-card mb-3\">\r\n                <div className=\"row no-gutters\">\r\n                    <div className=\"col-md-4\">\r\n                        <img src={person.profile} className=\"card-img\" alt={person.name + ' photography' }/>\r\n                    </div>\r\n                    <div className=\"col-md-8\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{person.name}</h5>\r\n                        <p className=\"card-text\">{person.biography}</p>\r\n                        <p className=\"card-text\">Birth: {person.birthday} {person.place_of_birth}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"container\">\r\n            <h4 className=\"text-center\">{person.name}'s movies</h4>\r\n            <div className=\"row cards-deck m-2\">\r\n                <div className=\"justify-content-center text-center card-group\">\r\n                    {renderMovies()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\nexport default PersonDetails","import { useEffect, useState } from \"react\"\r\nimport API from \"../api/api\"\r\nimport { useParams } from 'react-router-dom';\r\nimport {PersonDetails} from \"../components/PersonDetails\";\r\n\r\nexport function Person(props) {\r\n  const [person, setPerson] = useState({})\r\n  let { id } = useParams()\r\n\r\n  \r\n  useEffect(() => { \r\n    \r\n    async function getCharacter() {\r\n      let persondata = await new API.Person(id).getDetails()\r\n      setPerson(persondata)\r\n    }\r\n    getCharacter() \r\n  }, [id])\r\n\r\n  return (\r\n  <div className=\"container p-4\">\r\n    <PersonDetails person={person}/>\r\n  </div>\r\n  )\r\n}","import {MovieCard} from './MovieCard';\r\n\r\nexport function Movies(props) {\r\n       function renderMovies() {\r\n        return props.movies.map(movie => <MovieCard movie={movie} key={movie.id} />)\r\n    }    \r\n\r\n    return (\r\n        <div className=\"row cards-deck m-2\">\r\n        <div className=\"justify-content-center text-center card-group\">    \r\n            {renderMovies()}\r\n        </div>\r\n        </div>\r\n        )\r\n}\r\n\r\n","import { useEffect, useState } from \"react\"\r\nimport API from \"../api/api\"\r\nimport { Movies } from \"../components/Movies\"\r\n\r\nexport function Popular() {\r\n  const [movies, setMovies] = useState([])\r\n  \r\n  async function getMovies(){\r\n      let popularMovies = await API.Movies.getPopular()\r\n      setMovies(popularMovies)\r\n  }\r\n\r\n  useEffect(() => {getMovies()}, [])\r\n  \r\n    return (\r\n        <Movies movies={movies}/>\r\n        )\r\n}","import { useEffect, useState } from \"react\"\r\nimport API from \"../api/api\"\r\nimport { Movies } from \"../components/Movies\"\r\n\r\nexport function TopRated() {\r\n  const [movies, setMovies] = useState([])\r\n  \r\n  async function getMovies(){\r\n      let topRatedMovies = await API.Movies.getTopRated()\r\n      setMovies(topRatedMovies)\r\n  }\r\n\r\n  useEffect(() => {getMovies()}, [])\r\n  \r\n    return (\r\n        <Movies movies={movies}/>\r\n        )\r\n}","import { useEffect, useState } from \"react\"\r\nimport API from \"../api/api\"\r\nimport { Movies } from \"../components/Movies\"\r\n\r\nexport function Upcoming() {\r\n  const [movies, setMovies] = useState([])\r\n  \r\n  async function getMovies(){\r\n      let upcomingMovies = await API.Movies.getUpcoming()\r\n      setMovies(upcomingMovies)\r\n  }\r\n\r\n  useEffect(() => {getMovies()}, [])\r\n  \r\n    return (\r\n        <Movies movies={movies}/>\r\n        )\r\n}","import React from \"react\"\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from 'react-router-dom';\r\n\r\nimport { MovieDetails } from \"../pages/MovieDetails\";\r\nimport { Person } from \"../pages/Person\";\r\nimport { Popular } from \"../pages/Popular\";\r\nimport { TopRated } from \"../pages/TopRated\";\r\nimport { Upcoming } from \"../pages/Upcoming\";\r\n\r\nexport function Navbar() {\r\n    return (\r\n        <Router>\r\n            <div>\r\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                    <Link className=\"navbar-brand\" to=\"/\">Home</Link>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\" />\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                        <ul className=\"navbar-nav\">\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/toprated\">Top Rated</Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/upcoming\">Upcoming</Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/popular\">Popular</Link>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n\r\n                <hr />\r\n\r\n                {/*\r\n          A <Switch> looks through all its children <Route>\r\n          elements and renders the first one whose path\r\n          matches the current URL. Use a <Switch> any time\r\n          you have multiple routes, but you want only one\r\n          of them to render at a time\r\n        */}\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <TopRated/>\r\n                    </Route>\r\n                    <Route path=\"/movies/:id\">\r\n                        <MovieDetails/>\r\n                    </Route>\r\n                    <Route path=\"/person/:id\">\r\n                        <Person/>\r\n                    </Route>\r\n                    <Route path=\"/popular\">\r\n                        <Popular/>\r\n                    </Route>\r\n                    <Route path=\"/upcoming\">\r\n                        <Upcoming/>\r\n                    </Route>\r\n                    <Route path=\"/toprated\">\r\n                        <TopRated/>\r\n                    </Route>\r\n\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}","import {Navbar} from './components/Navbar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\"></div>\n      <Navbar/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootswatch/dist/darkly/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}